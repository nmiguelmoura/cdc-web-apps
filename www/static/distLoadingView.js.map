{"version":3,"sources":["src/general/genericStates/views/LoadingView.js"],"names":["nmm","states","genericStates","views","LoadingView","name","INCREMENT_ROTATION","_init","_loadingIcon","rotation","TweenLite","to","scale","x","y","delayedCall","runtime","app","pixi","ticker","remove","_onFrameUpdateBound","update","bind","add","graph","PIXI","Graphics","i","maxCircles","step","dist","radius","color","angle","Math","PI","cos","sin","beginFill","lineStyle","drawCircle","endFill","Sprite","generateTexture","position","set","defaultResolution","width","height","anchor","addChild","clear","destroy","texture","_buildLoader","Container"],"mappings":"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","file":"distLoadingView.js","sourcesContent":["/**\n * Created by Nuno on 12/09/17.\n */\n\n'use strict';\nnmm.states.genericStates.views.LoadingView = class LoadingView extends PIXI.Container {\n    constructor () {\n        super();\n        this.name = 'loading';\n        this.INCREMENT_ROTATION = 0.05;\n        this._init ();\n    }\n\n    update () {\n        this._loadingIcon.rotation += this.INCREMENT_ROTATION;\n    }\n\n    endLoading () {\n        TweenLite.to(this._loadingIcon.scale, 0.5, {x: 1.5, y: 1.5});\n        TweenLite.delayedCall(0.5, function () {\n            nmm.runtime.app.pixi.app.ticker.remove(this._onFrameUpdateBound);\n        }, [], this);\n    }\n\n    startLoading () {\n        if(!this._onFrameUpdateBound) {\n            this._onFrameUpdateBound = this.update.bind(this);\n        }\n        nmm.runtime.app.pixi.app.ticker.add(this._onFrameUpdateBound);\n    }\n\n    _buildLoader () {\n        let graph = new PIXI.Graphics();\n        let i,\n            maxCircles = 8,\n            // 180 instead of 360 because on angle calculation bellow, its necessary to transform deg to rad,\n            // so dont need to divide by 180\n            step = 180 / (maxCircles - 1),\n            dist = 40,\n            radius = 6,\n            color = 0xFFFFFF,\n            angle,\n            x,\n            y;\n        for (i = 0; i < maxCircles; i++) {\n            angle = (i * step) * Math.PI;\n            x = Math.cos(angle) *  dist;\n            y = Math.sin(angle) * dist;\n\n            graph.beginFill(color, 1 - i * 0.1)\n                .lineStyle(1, 0x000000, 1)\n                .drawCircle(x, y, radius);\n        }\n        graph.endFill();\n\n        this._loadingIcon = new PIXI.Sprite(graph.generateTexture());\n        this._loadingIcon.position.set(nmm.runtime.app.defaultResolution.width / 2, nmm.runtime.app.defaultResolution.height / 2);\n        this._loadingIcon.anchor.set(0.5);\n        this._loadingIcon.scale.set(0.5);\n        this.addChild(this._loadingIcon);\n\n        graph.clear();\n        graph.destroy({texture: true});\n    };\n\n    _init () {\n        this._buildLoader();\n    }\n};"]}